#!/bin/bash

fail ()
{
	echo "ERROR: $@"
	exit 1
}
warn ()
{
	echo "WARN: $@"
}
announce ()
{
	echo "--- $@"
}

#-Xnoagent -Djava.compiler=NONE -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005
# ENVIRONMENT

if [ ! -f ./env.sh ]
then
	warn "env.sh not found. A default will be created for you."
	if [ -f ./env.sh.example ]
	then
		cp env.sh.example env.sh
	else
		warn "env.sh.example not found!"
	fi
	exit 1
fi
cat ./env.sh
source ./env.sh
[ -n "$pgdb" ] || fail "Required environment variable pgdb not found."
[ -d "$pg_bin" ] || fail "Cannot find pgsql bin directory: $pg_bin."
export PATH="$PATH:$pg_bin"

# warns when the file or directory you're trying to destroy doesn't exist.
killOrNatter ()
{
	local target="$1"; shift
	if [ -e "$target" ]
	then
		echo "delete: $target"
		rm -rf "$target"
	else
		warn "Target not found: $target"
	fi
}

if [ -z "$1" ]
then
	cat <<USAGE
usage:
   init   - creates a new database.
   start  - starts the database server.
   stop   - stops the database server.
   status - displays the status of the database server.
USAGE
	exit 1
fi
while [ -n "$1" ]
do
	action="$1" ; shift
	announce "$action"
	case "$action" in
	"init" )
		read -p "This will completely hose the DB. Are you sure? " -n 1 -r
		echo "\n"
		if [ $REPLY == y ] || [ $REPLY == Y ] # no regexes in git bash :(
		then
			rm -v "$pgdb/log"
			pg_ctl init -D "$pgdb/db/"
		fi
		;;
	"start" )
		pg_ctl -D "$pgdb/db/" -l "$pgdb/log" start
		;;
	"stop" )
		pg_ctl -D "$pgdb/db/" stop
		;;
	"status" )
		pg_ctl -D "$pgdb/db/" status
		;;
	"i" )
		psql postgres
		;;
	* )
		fail "Unkown command: $action"
		;;
	esac
done
